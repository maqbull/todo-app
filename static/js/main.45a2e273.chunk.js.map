{"version":3,"sources":["firebase-config.js","Todo.js","App.js","reportWebVitals.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Todo","props","useState","task","open","setOpen","update","setUpdate","toUpdateId","setToUpdateId","handleClose","ListItem","ListItemText","primary","title","secondary","datetime","ListItemSecondaryAction","IconButton","edge","aria-label","onClick","id","Edit","collection","doc","delete","then","res","console","log","DeleteOutlineRounded","Dialog","onClose","DialogContent","TextField","autoFocus","margin","label","type","fullWidth","name","value","onChange","event","target","DialogActions","Button","color","App","tasks","setTasks","input","setInput","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","status","Container","maxWidth","noValidate","variant","required","preventDefault","add","timestamp","FieldValue","serverTimestamp","push","disabled","startIcon","AddCircleOutlineRounded","List","dense","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45a2e273.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\nconst firebaseapp = firebase.initializeApp( {\r\n    apiKey: \"AIzaSyDBY4XX5BSoc2XU8J15wpV6PZju6CGDN3w\",\r\n    authDomain: \"calcium-firefly-296017.firebaseapp.com\",\r\n    projectId: \"calcium-firefly-296017\",\r\n    storageBucket: \"calcium-firefly-296017.appspot.com\",\r\n    messagingSenderId: \"646783129169\",\r\n    appId: \"1:646783129169:web:86ce4829c5c5db9d944a70\",\r\n    measurementId: \"G-ENQLLZ7NBN\"\r\n  });\r\n\r\n  const db = firebaseapp.firestore();\r\n  export default db;","import React, {useState} from 'react'\r\nimport { Button, ListItem, ListItemText,TextField, ListItemSecondaryAction, IconButton} from '@material-ui/core';\r\n     import {  DeleteOutlineRounded, Edit,} from '@material-ui/icons';\r\n\r\nimport {  Dialog, DialogContent, DialogActions,} from '@material-ui/core';\r\nimport db from './firebase-config';\r\n\r\nfunction Todo(props) {\r\n      const [task, setTask] = useState(props.task);\r\n      const[open,setOpen] = useState(false)\r\n      const[update,setUpdate] = useState('')\r\n      const [toUpdateId, setToUpdateId] = useState('');\r\n\r\n     \r\n      const openUpdateDialog = (todo) => {\r\n        setOpen(true);\r\n        setToUpdateId(task.id);\r\n        setUpdate(task.title);\r\n      }\r\n      const deleteTodo = (id) => {\r\n        db.collection('todos').doc(id).delete().then(res => {\r\n          console.log('Deleted!', res);\r\n          \r\n        });\r\n      }\r\n      const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n\r\n      const editTodo = () => {\r\n        db.collection('todos').doc(toUpdateId).update({\r\n          title: update\r\n        });\r\n        setOpen(false); \r\n      }\r\n             \r\n    return (\r\n        <>\r\n        <ListItem key={task.id} >\r\n\r\n        <ListItemText\r\n          primary={task.title}\r\n          secondary={task.datetime}\r\n        />\r\n\r\n        <ListItemSecondaryAction>\r\n          <IconButton edge=\"end\" aria-label=\"Edit\" onClick={() => openUpdateDialog(task)}>\r\n            <Edit />\r\n          </IconButton>\r\n          <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => deleteTodo(task.id)}>\r\n            <DeleteOutlineRounded />\r\n          </IconButton>\r\n        </ListItemSecondaryAction>\r\n\r\n      </ListItem>\r\n      <Dialog open={open} onClose={handleClose}>\r\n      <DialogContent>\r\n        <TextField\r\n          autoFocus\r\n          margin=\"normal\"\r\n          label=\"Update Todo\"\r\n          type=\"text\"\r\n          fullWidth\r\n          name=\"updateTodo\"\r\n          value={update}\r\n          onChange={event => setUpdate(event.target.value)}\r\n        />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose} color=\"primary\">\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={editTodo} color=\"primary\">\r\n          Save\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n\r\n </>\r\n    )\r\n}\r\nexport default Todo;","import React, { useState, useEffect } from 'react';\nimport { Container, Button} from '@material-ui/core';\n\nimport {  TextField,List} from '@material-ui/core';\n\n  import { AddCircleOutlineRounded} from '@material-ui/icons';\n\n\nimport Todo from './Todo';\nimport db from './firebase-config';\nimport firebase from \"firebase\";\n\nconst App = () => {\n    const [tasks, setTasks] = useState([]);\n    const [input, setInput] = useState('');\n    \n   \nuseEffect(()=>{\ndb.collection('todos').orderBy('timestamp','desc').onSnapshot(snapshot =>\n    setTasks(snapshot.docs.map(doc => (\n       { id: doc.id, title : doc.data().title , status : doc.data().status })))\n    )} ,[]);\n\n    const addTask = (event) => {\n        event.preventDefault();\n        db.collection('todos').add({\n            title: input,\n            status: false,\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\n        })\n        tasks.push({\n          title: input,\n            status: false,\n        })\n        setInput('');\n    }\n    \n    return (\n        <Container maxWidth=\"sm\">\n        <form noValidate>\n\n        <TextField\n          variant=\"outlined\"\n          margin=\"normal\"\n          required\n          fullWidth\n          id=\"todo\"\n          label=\"Enter ToDo\"\n          name=\"todo\"\n          autoFocus\n          value={input}\n          onChange={event => setInput(event.target.value)}\n        />\n\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n          \n          onClick={addTask}\n          disabled={!input}\n          startIcon={<AddCircleOutlineRounded />}\n        >\n          Add Todo\n      </Button>\n\n      </form>\n\n      <List dense={true}>\n                {tasks.map(task => (\n                    <Todo key={task.id} task={task} />\n                ))}\n            </List>\n           \n    \n        </Container>\n    );\n};\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}